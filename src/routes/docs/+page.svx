# Introduction

Edra is a component based rich text editor built with
[Tiptap](https://tiptap.dev/) and [Svelte](https://svelte.dev/). It is designed to be highly
customizable and extensible, allowing developers to create their own custom editors with ease.

The main goal of Edra is to provide a **baseline** with minimum to no pre-configured components, yet highly customizable and extensible.

> Note:
>
> **Why is edra a component based library?**
>
> The main reason for this library is to provide the full control over the editor, allowing developers
> to create their own custom editors with ease. This is achieved by using the powerful
> [Tiptap](https://tiptap.dev/) library, which provides a rich set of features and customization options.
> This way the developers have the full control over the code and they can achieve anything with it.

---

# Installation

Edra comes with two ui floavors, `headless` and `shadcn`. The `headless` ui usage pure css with classes and the `shadcn` ui usage the [svelte-shadcn](https://next.shadcn-svelte.com/).

Choose which one you want to use.

1. [Installation with headless ui](/docs#installation-with-headless-ui)
2. [Installation with shadcn ui](/docs#installation-with-shadcn-ui)

---

## Installation with headless ui

For installation with headless ui, you can use the following command:

```sh
# For NPM
npx edra init headless
# For PNPM
pnpm dlx edra init headless
```

The above command will copy the `edra` component as folder in `src/lib/components/edra` and install the required dependencies.

---

## Installation with shadcn ui

> Warning:
>
> The **shadcn** ui flavor have some prerequisites, so please read the following instructions carefully.

### Prerequisites

The `shacn` ui based components usages the [svelte-shadcn](https://next.shadcn-svelte.com/) and [tailwind-typography](https://github.com/tailwindlabs/tailwindcss-typography) packages. You can find their respective installation guides in their documentation.

After installing the `svelte-shadcn` and `tailwind-typography` packages, you need to add the following `svelte-shadcn` components in your project.

```sh
# For NPM
npx shadcn-svelte@next add dropdown-menu button tooltip input popover
# using pnpm
pnpm dlx shadcn-svelte@next add dropdown-menu button tooltip input popover
```

After the installation of `svelte-shadcn` components, we can run following
command to install `edra` component with `shadcn` ui.

```sh
# For NPM
npx edra init shadcn
# For PNPM
pnpm dlx edra init shadcn
```

This command will copy the `edra` component as folder in `src/lib/components/edra` and install the required dependencies.

---

# Usage

First of all, let's talk about the component structure. The `edra` will provide two main components, `Edra` and `EdraToolbar`. The `Edra` component is the main component that will render the editor, while the `EdraToolbar` component is used to render the toolbar.

Take a look at the `Edra` component's props interface:

```ts{f[$lib/components/edra/utils.ts]}
/**
 * Props for Edra's editor component
*/
export interface EdraProps {
	class?: string;
	content?: Content;
	editable?: boolean;
	showMenu?: boolean;
	limit?: number;
	editor?: Editor;
	/**
	 * Callback function to be called when the content is updated
	 * @param content
	 */
	onUpdate?: (props: { editor: Editor; transaction: Transaction }) => void;
}
```

> Info:
>
> The `class` prop is used to add custom classes to the `Edra` component. The `editor` which is a **bindable** prop is used to pass the editor instance to the `Edra` component. The `showMenu` prop is used to control whether any bubble menu should show or not. The `content` prop is used to pass the initial content to the editor. The `onUpdate` prop is used to update the content of the editor after a transaction is executed, and `limit` prop is used to set the maximum number of characters allowed in the editor.

To use the `edra` component, you can import it in your Svelte component and use it as follows:

```svelte{h[2,4-7,9-11,16,18]%f[my-editor.svelte]}
<script lang="ts">
	import { Edra, EdraToolbar } from '$lib/components/edra/shadcn';
	import type { Content, Editor } from '@tiptap/core';
	import { Transaction } from '@tiptap/pm/state';

	let editor = $state<Editor>();
	let content = $state<Content>();
	let showToolBar = $state(true);
	let showMenu = $state(true);

	function onUpdate(props: { editor: Editor; transaction: Transaction }) {
		saveContent(props.editor.getJSON()); // save the content in your preferred way
	}
</script>

<div class="m-auto flex h-[35rem] w-[95%] flex-col rounded border sm:w-[80%]">
	{#if editor && showToolBar}
		<EdraToolbar class="w-full border-b p-1" {editor} />
	{/if}
	<Edra class="overflow-auto" bind:editor {showMenu} {content} {onUpdate} />
</div>
```

> Warning:
>
> You must need to create an editor instance, if you do not want to use `EdraToolbar` component.

You can also use the class names for the `Edra` component to customize the editor's appearance. e.g.

```svelte{ga[17,20,23-32]%gd[16,19]%f[my-editor.svelte]}
<script lang="ts">
	import { Edra, EdraToolbar } from '$lib/components/edra/shadcn/index.js';

	let editor = $state<Editor>();
	let content = $state<Content>();
	let showToolBar = $state(true);
	let showMenu = $state(true);

	function onUpdate(props: { editor: Editor; transaction: Transaction }) {
		saveContent(props.editor.getJSON());
	}
</script>

<div class="m-auto flex h-[35rem] w-[95%] flex-col rounded border sm:w-[80%]">
	{#if editor && showToolBar}
		<EdraToolbar class="w-full border-b p-1" {editor} />
		<EdraToolbar {editor} />
	{/if}
	<Edra class="overflow-auto" bind:editor {showMenu} {content} {onUpdate} />
	<Edra bind:editor {showMenu} {content} {onUpdate} />
</div>

<style>
	:global(.edra-toolbar) {
		width: 100%;
		border-bottom-width: 1px;
		padding: 0.25rem;
	}
	:global(.edra) {
		overflow: auto;
	}
</style>
```

---

# JSON Output

You can controll the editor output without worrying about the initial `content` format.
The simplest way to do this is to use the `onUpdate` prop, which is a callback function that is called when the `content` is updated.

For the JSON output, you can use following example code:

```ts{h[2]%f[my-editor.svelte]}
function onUpdate(props: { editor: Editor; transaction: Transaction }) {
	const myOutput = props.editor.getJSON();
	// save the output in your preferred way
	saveContent(myOutput);
}
```

# HTML Output

Similar to JSON output, you can also get the HTML output of the editor in `onUpdate` callback function.

```ts{h[2]%f[my-editor.svelte]}
function onUpdate(props: { editor: Editor; transaction: Transaction }) {
	const myOutput = props.editor.getHTML();
	// save the output in your preferred way
	saveContent(myOutput);
}
```

---

# Slash Command

The `SlashCommand` is a feature that allows you to add custom commands to the editor.
It is a powerful feature that allows you to add custom commands to the editor,
which can be used to perform various actions, like inserting `images`, `videos`, `audios`, `tables`, `code blocks`, etc. You can use in by pressing the `/` key and then simply start typing the command name.

> Note:
>
> You can use `ArrowDown`, `crtl+j` or `cmd+j`, `Tabs` to navigate down
> and `ArrowUp`, `ctrl+k` or `cmd+k` to navigate up. Use `enter` to select the command.

Try it out in [demo](/)

---

# Bubble Menu

The `Edra` component comes with `Notion` like bubble menus. There are basically 4 bubble menus in action.

1. Editor Menu: Provides basic editor actions like `EdraToolbar`
2. Link Menu: Provides link related actions like copy, delete, edit, etc.
3. Table Row Menu: Provides table row related actions like insert, delete, etc.
4. Table Col Menu: Provides table column related actions like insert, delete, etc.

> Note:
>
> You can disable all of them by passing `false` to the `showMenu` prop.

> Warning:
>
> Disabling the `showMenu` prop will disable all of the bubble menus. You may need
> to change the code as per your requirement, if you want a different behavior.

Try it out in [demo](/)

---

# Font Size

`Edra` component provides a way to change the font size of the editor.
In `headless` ui, you'll find a decrease and increase button in the editor toolbar.
In `shadcn` ui, you'll find a dropdown menu in the editor toolbar.

In either case, you can change the font size of any text in the editor.

Try it out in [demo](/)

---

# Placeholder

`Edra` component provides a way to add placeholder text to the editor.
This is a `ghost` text and can be seen in an empty line. You can change the behavior of the
placeholder as per your liking in `$lib/components/edra/editor.ts` file in **your project**.

You can also find the same file here in [github](https://github.com/Tsuzat/Edra/blob/main/src/lib/edra/editor.ts).

Try it out in [demo](/)

---

# Code Block Extended

`Edra` component provides a way to extend the `code block` feature. You can add a language selector and copy the code to clipboard. For code highlighting, we're using lowlight with `one-dark` and `one-light` themes, for both `dark` and `light` mode respectively. You can find the file for `onedark.css` in `$lib/components/edra/onedark.css` file in **your project**.

You can also find the same file here in [github](https://github.com/Tsuzat/Edra/blob/main/src/lib/edra/onedark.css).

> Info:
>
> By default, tiptap does not provide a way to select the language or to copy the code.
> We have extended this functionality in `Edra` component to better UX.

> Warning:
>
> We use `html .dark` css selector to apply the `dark` mode theme to the code block.
> If you feel like to change the css selector, you need to change it in `onedark.css` file.

Try it out in [demo](/)

---

# Image Extended

`Edra` component let's you add an image in different ways. You can add an image link or
select an image from your local machine and add it to the editor. Moreover, you can also
add an image from your clipboard. `Edra` provides an `ImagePlaceholder` component which let's you put a placeholder for future references.

`Edra` lets you paste an image of upto 2MB in size. You can change this behavior by changing the `maxSize` value in `getHandlePaste` function in `$lib/components/edra/editor.ts` file in **your project**. You can also find the same file here in [github](https://github.com/Tsuzat/Edra/blob/main/src/lib/edra/editor.ts).

You can specify the image `maxSize` in this manner:

```ts{h[4]%f[$lib/components/edra/editor.ts]}
editor.setOptions({
	editorProps: {
		// maximum 3 MBs
		handlePaste: getHandlePaste(editor, 3)
	}
});
```

> Info:
>
> **What if I want to process the pasted image?**
> You may want to do some additional processing when user pastes an image.
> For that you can modify the `getHandlePaste` function in `$lib/components/edra/utils.ts` file in **your project**.
> You can also find the same file here in [github](https://github.com/Tsuzat/Edra/blob/main/src/lib/edra/utils.ts).

Try it out in [demo](/)

---

# Video Extended

Similar to `ImageExtended`, you can add a video in different ways.
You can add a **video link or select a video from your local machine** and add it to the editor.
`Edra` provides a `VideoPlaceholder` component which let's you put a placeholder for future references.

> Warning:
>
> You can not paste a video in editor from clipboard. You need to upload the video from your local machine, or provide a link to the video.

Try it out in [demo](/)

---

# Audio Extended

Similar to `ImageExtended` and `VideoExtended`, you can add an audio in different ways.
You can add an **audio link or select an audio from your local machine** and add it to the editor.
`Edra` provides an `AudioPlaceholder` component which let's you put a placeholder for future references.

> Warning:
>
> You can not paste an audio in editor from clipboard. You need to upload the audio from your local machine, or provide a link to the audio.

Try it out in [demo](/)

---

# IFrame Extended

Similar to `ImageExtended` and `VideoExtended`, you can add an iframe with a source url.

`Edra` provides an `IFramePlaceholder` component which let's you put a placeholder for future references.

> Warning:
>
> You can only add the iframe with a source url. You can not paste an iframe in editor from clipboard.

Try it out in [demo](/)

---

# Table

`Edra` component provides a way to add a table in editor. You can add it by either clicking
the `table` button in `EdraToolbar` or by using `SlashCommand` or `/table`.
By Default, a table with 3 columns and 3 rows will be added. Furthermore, you can insert _after, before or delete a column or row_.

> Error:
>
> If you click the `table` button in `EdraToolbar` or use it from `SlashCommand`, while being focused on the `table` in the editor, the current table will be deleted.

Try it out in [demo](/)

---

# Search And Replace

`Edra` component provides a way to search and replace text in the editor. You can use it by clicking the `search` button in the `EdraToolbar`. You can search a text, _match case_, _go to next match_ and _go to previous match_.

You can also _replace_ the current text or _replace all_ the text in the editor by using the `replace` button in the `EdraToolbar`.

Try it out in [demo](/)

---

# Links

`Edra` component provides an advanced link feature. By default, the links will not open on click.
The link have a `bubble menu` which let's you _edit_, _open_, _copy link_ and _delete link_.

If you want to change this behavior, you can change the `openOnClick` value in `Link.configure` function in `$lib/components/edra/editor.ts` file in **your project**. You can also find the same file here in [github](https://github.com/Tsuzat/Edra/blob/main/src/lib/edra/editor.ts).

```svelte{ga[2]%gd[3]%f[$lib/components/edra/editor.ts]}
Link.configure({
	openOnClick: true,
	openOnClick: false,
	autolink: true,
	defaultProtocol: 'https',
	HTMLAttributes: {
		target: '_blank',
		rel: 'noopener noreferrer'
	}
})
```

Try it out in [demo](/)

---

# Drag Handle

`Edra` component provides a way to _drag and drop_ handle in the editor.
You can drag a node and drop it in anywhere in the **editor**.
You can find the _drag handle_ component in `$lib/components/edra/drag-handle.svelte` file in **your project** and you can also find the same file here in [github](https://github.com/Tsuzat/Edra/blob/main/src/lib/edra/drag-handle.svelte).

Try it out in [demo](/)

---

# LaTeX Support

`Edra` component provides a way to add LaTeX expressions in the editor. You can add them
by using `$` symbol. For example, you can write `$\sum_{i=1}^n i^2$` to get an equation.
You also click on a LaTeX expression and it will be evaluated and the result will be shown.

Try it out in [demo](/)
